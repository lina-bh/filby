---
import WizardPage from "../layouts/WizardPage.astro";
---

<WizardPage title="Create calendar file">
  <p>
    Now that the program has your timetable, it can create a calendar file that
    you can import into your calendar app.
  </p>
  <button id="transform-btn" type="button">Create calendar file</button>
  <details class="hidden-textbox">
    <summary>Generated calendar:</summary>
    <textarea id="ical-box" readonly></textarea>
  </details>
  <button id="save-btn" type="button" disabled>Save to file...</button><div
    slot="footer">
    <button id="wizard-footer__next-btn" type="button" disabled>Next</button>
  </div>
</WizardPage>

<script>
  import { id } from "../scripts/renderer-common";

  const icalBox = id<HTMLTextAreaElement>("ical-box");
  const transformBtn = id<HTMLButtonElement>("transform-btn");
  const saveBtn = id<HTMLButtonElement>("save-btn");
  const nextBtn = id<HTMLButtonElement>("wizard-footer__next-btn");
  transformBtn.addEventListener("click", async () => {
    const cal = await electronAPI.transform();
    transformBtn.disabled = true;
    icalBox.value = cal;
    saveBtn.disabled = false;
  });
  saveBtn.addEventListener("click", async () => {
    await electronAPI.writeCalendar();
    nextBtn.disabled = false;
  });
  nextBtn.addEventListener("click", () => {
    location.href = "/finish";
  });
</script>

<style>
  #ical-box {
    resize: none;
    height: calc(100% - 1rem);
    width: 100%;
  }

  .hidden-textbox {
    flex: 1;
  }

  summary::marker {
    cursor: default;
  }
</style>
